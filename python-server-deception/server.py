#!/usr/bin/env python3

import os
import requests
import random
import sys
from http.server import BaseHTTPRequestHandler, HTTPServer
import time

### CONFIGURATION

PORT = 5000
DELAY = os.getenv('DELAY', 100)
LENGTH_OF_LINKS = (os.getenv('LINKS_MIN_LEGTH', 5), os.getenv('LINKS_MAX_LEGTH', 15))
LINKS_PER_PAGE = (os.getenv('LINKS_MIN_PER_PAGE', 10), os.getenv('LINKS_MAX_PER_PAGE', 15))
CHAR_SPACE = os.getenv('CHAR_SPACE', 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
API_SERVER_URL = os.getenv('API_SERVER_URL')
API_SERVER_PORT = os.getenv('API_SERVER_PORT', 8080)
API_SERVER_PATH = os.getenv('API_SERVER_PATH', "/api/v2/users")
COUNTER = random.randint(1, os.getenv('MAX_COUNTER', 10))


class Handler(BaseHTTPRequestHandler):
  webpages = None
  
  def generate_page(self, seed):
    """Generate a webpage containing only random links"""
    global COUNTER
    title = '<title>Spider Trap</title>'
    h2 = '<div style="text-align:center";> <h1 style="font-family:verdana; color:#f15946; margin-top: 100px; margin-bottom: 50px;" >' + "Crawl me! &#128376;" +  '</h1> <h1 style="font-family:verdana; color:#f15946; margin-bottom: 50px;">' + str(COUNTER) + '</h1></div>\n'

    html = title + h2 + '<html>\n<body style="background-color: #1F1D1F;">\n'
    
    random.seed(seed)
    num_pages = random.randint(*LINKS_PER_PAGE)
    
    if(COUNTER == 0):
        html += '<b><div style="font-family:verdana; text-align:center; margin-top: 10px;"><a style="color:#53b3cb;" href="http://canarytokens.com/api/users/5jjo77ldwe6t64j1gd6nluyek/passwords.txt"> http://canarytokens.com/api/users/5jjo77ldwe6t64j1gd6nluyek/passwords.txt </a><br></div></b>\n'
    if self.webpages is None:
      for i in range(num_pages):
        address = ''.join([random.choice(CHAR_SPACE) for i in range(random.randint(*LENGTH_OF_LINKS))])
        html += '<b><div style="font-family:verdana; text-align:center; margin-top: 10px;"><a style="color:#53b3cb;" href="' + address + '">' + address + '</a><br></div></b>\n'
    else:
      # get links from the file contents
      for i in range(num_pages):
        address = random.choice(self.webpages)
        html += '<a href="' + address + '">' + address + '</a><br>\n'
      
    html +='</body>\n</html>'
    
    return html
    
  def do_HEAD(self):
    """Sends header information"""
    
    self.send_response(200)
    self.send_header("Content-type", "text/html")
    self.end_headers()

  def do_GET(self):
    global COUNTER
    """Responds to any webpage request with a page generated by the generate_page function"""
    time.sleep(DELAY/1000.0)
    self.send_response(200)
    self.send_header('Content-type', 'text/html')
    self.end_headers()
    if(COUNTER <= 0):
        COUNTER = random.randint(1, 10)
        try:
            self.wfile.write(self.generate_page(self.path).encode())
        except:
            print("skip")
    else:
        COUNTER -= 1
        try:
            self.wfile.write(self.generate_page(self.path).encode())
        except:
            print("skip")
  

def print_usage():
  print('Usage: ' + sys.argv[0] + ' [FILE]\n')
  print('FILE is file containing a list of webpage names to serve, one per line.  If no file is provided, random links will be generated.')

def get_users(self):
  try:
    r = requests.get(API_SERVER_URL + ":" + API_SERVER_PORT + API_SERVER_PATH, verify=False)
    print("Response: " + r.text)
    return r.text
  except Exception as e:
    print('Error getting users')
    print(e)
    self.wfile.write(b'Error getting users')


def main():
  if '-h' in sys.argv or '--help' in sys.argv:
    print_usage()
    global COUNTER
    print("Counter: " + str(COUNTER))
    exit()
    
  # Use a file, if provided on command line
  if len(sys.argv) == 2:
    try:
      # read in the file
      f = open(sys.argv[1])
      Handler.webpages = f.readlines()
      f.close()
      
      # check for empty file
      if Handler.webpages == []:
        print('The file provided was empty.  Using randomly generated links.')
        Handler.webpages = None
    except IOError:
      print('Can\'t read input file.  Using randomly generated links.')
    
  try:
    print('Starting server on port %d...' % PORT)
    server = HTTPServer(('0.0.0.0', PORT), Handler)
    print('Server started.  Use <Ctrl-C> to stop.')
    server.serve_forever()
  except KeyboardInterrupt:
    print('Stopping server...')
    server.socket.close()
    print('Server stopped')
  except:
    print('Error starting http server on port %d.' % PORT)
    print('Make sure you are root, if needed, and that port %d is open.' % PORT)
  
  
if __name__ == '__main__':
  main()
